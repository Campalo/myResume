{"version":3,"sources":["CVcategories/Header.js","CamilleCV.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","react_pdf_browser_es","style","stylesHeader","container","image","src","section","h1","h2","StyleSheet","create","flexDirection","backgroundColor","padding","width","justifyContent","borderRadius","paddingLeft","lineHeight","fontSize","marginTop","CamilleCV","size","styles","page","CVcategories_Header","highlight","p","flex","@media max-width: 400","margin","@media orientation: landscape","color","fontWeight","App","Fragment","src_CamilleCV","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAoBeA,EAjBA,WACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOC,EAAaC,WACxBN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOC,EAAaE,MAAOC,IAAI,oCACtCR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOC,EAAaI,SACxBT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOC,EAAaK,IAA1B,4BACAV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOC,EAAaK,IAA1B,+CAGAV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOC,EAAaM,IAA1B,iEAUFN,EAAeO,IAAWC,OAAO,CACrCP,UAAW,CACTQ,cAAe,MACfC,gBAAiB,UACjBC,QAAS,GACTC,MAAO,OACPC,eAAgB,UAElBT,QAAS,CACPK,cAAe,UAEjBP,MAAO,CACLU,MAAO,IACPE,aAAc,IAEhBT,GAAI,CACFU,YAAa,GACbC,WAAY,IACZC,SAAU,IAEZX,GAAI,CACFS,YAAa,GACbE,SAAU,GACVC,UAAW,MCnBAC,EArBG,kBAChBxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMsB,KAAK,KAAKrB,MAAOsB,EAAOC,MAC5B3B,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOpB,WAClBN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOjB,SAGlBT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOhB,IAApB,iBACAV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOG,WAApB,8BAEF7B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOjB,SAElBT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOhB,IAApB,kBACAV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAOsB,EAAOI,GAApB,qBASJJ,EAASd,IAAWC,OAAO,CAC/Bc,KAAM,CACJZ,gBAAiB,WAEnBT,UAAW,CACTyB,KAAM,EACNjB,cAAe,MACfkB,wBAAyB,CACvBlB,cAAe,WAGnBL,QAAS,CACPK,cAAe,SACfmB,OAAQ,GACRjB,QAAS,GACTC,MAAO,MACPe,wBAAyB,CACvBf,MAAO,QAETiB,gCAAiC,CAC/BjB,MAAO,MAGXP,GAAI,CACFyB,MAAO,UACPb,SAAU,GACVc,WAAY,OAEdP,UAAW,CACTM,MAAO,WAETL,EAAG,CACDK,MAAO,UACPb,SAAU,aC7CCe,MAXf,WACE,OACErC,EAAAC,EAAAC,cAACF,EAAAC,EAAMqC,SAAP,KACEtC,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACqC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc5bdd32.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Text, Image, View, StyleSheet} from '@react-pdf/renderer';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <View style={stylesHeader.container}>\r\n      <Image style={stylesHeader.image} src='https://i.imgur.com/OvRHc2K.jpg' />\r\n      <View style={stylesHeader.section}>\r\n        <Text style={stylesHeader.h1}>Hi, I'm CAMILLE CHARTEAU</Text>\r\n        <Text style={stylesHeader.h1}>\r\n          a FULLSTACK WEB DEVELOPER, living in BERLIN\r\n        </Text>\r\n        <Text style={stylesHeader.h2}>\r\n          Fee free to contact me on Linkedin or at +33 6 67 45 25 95\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nconst stylesHeader = StyleSheet.create({\r\n  container: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#ffee58',\r\n    padding: 30,\r\n    width: '100%',\r\n    justifyContent: 'center',\r\n  },\r\n  section: {\r\n    flexDirection: 'column',\r\n  },\r\n  image: {\r\n    width: 100,\r\n    borderRadius: 50,\r\n  },\r\n  h1: {\r\n    paddingLeft: 30,\r\n    lineHeight: 2.2,\r\n    fontSize: 16,\r\n  },\r\n  h2: {\r\n    paddingLeft: 30,\r\n    fontSize: 12,\r\n    marginTop: 14,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport {Page, Text, View, Document, StyleSheet} from '@react-pdf/renderer';\r\nimport Header from './CVcategories/Header';\r\n\r\n// Create Document Component\r\nconst CamilleCV = () => (\r\n  <Document>\r\n    <Page size='A4' style={styles.page}>\r\n      <Header />\r\n      <View style={styles.container}>\r\n        <View style={styles.section}>\r\n          {/* <Education></Education>\r\n          <Work></Work> */}\r\n          <Text style={styles.h1}>I am Camille.</Text>\r\n          <Text style={styles.highlight}>A Fullstack JS developer.</Text>\r\n        </View>\r\n        <View style={styles.section}>\r\n          {/* <Projects></Projects> */}\r\n          <Text style={styles.h1}>My experiences</Text>\r\n          <Text style={styles.p}>My education</Text>\r\n        </View>\r\n      </View>\r\n    </Page>\r\n  </Document>\r\n);\r\n\r\nexport default CamilleCV;\r\n\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    backgroundColor: '#E4E4E4',\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    '@media max-width: 400': {\r\n      flexDirection: 'column',\r\n    },\r\n  },\r\n  section: {\r\n    flexDirection: 'column',\r\n    margin: 10,\r\n    padding: 10,\r\n    width: '50%',\r\n    '@media max-width: 400': {\r\n      width: '100%',\r\n    },\r\n    '@media orientation: landscape': {\r\n      width: 200,\r\n    },\r\n  },\r\n  h1: {\r\n    color: '#009688',\r\n    fontSize: 20,\r\n    fontWeight: '100',\r\n  },\r\n  highlight: {\r\n    color: '#536dfe',\r\n  },\r\n  p: {\r\n    color: '#3f3d56',\r\n    fontSize: 11,\r\n  },\r\n});\r\n","import React from 'react';\nimport {PDFViewer} from '@react-pdf/renderer';\nimport CamilleCV from './CamilleCV';\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <h1> welcome on my resume made with react.js</h1>\n      <PDFViewer>\n        <CamilleCV />\n      </PDFViewer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}